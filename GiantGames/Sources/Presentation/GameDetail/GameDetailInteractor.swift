//
//  GameDetailInteractor.swift
//  GiantGames
//
//  Created by Xavier on 13/07/2020.
//  Copyright Â© 2020 GiantGames All rights reserved.
//

import Foundation

final class GameDetailInteractor {
    let gameImageService: GameImageServiceApi
    let gameVideoService: GameVideoServiceApi

    init(gameImageService: GameImageServiceApi,
         gameVideoService: GameVideoServiceApi) {
        self.gameImageService = gameImageService
        self.gameVideoService = gameVideoService
    }
}

extension GameDetailInteractor: GameDetailInteractorProtocol {
    func coverURL(_ id: Int, completion: @escaping (Result<URL?, APIError>) -> Void) {
        gameImageService.covers(id) {
            completion($0.map { $0.compactMap { $0.url(.small) }.first })
        }
    }

    func gameImages(_ ids: [Int], completion: @escaping ([GameImage]) -> Void) {
        var images = [GameImage]()
        let group = DispatchGroup()

        /// complexity generated by igdb Screenshot api https://api-docs.igdb.com/?swift#screenshot
        ids.forEach { [weak self] id in
            group.enter()
            self?.screenshot(id) {
                if case let .success(result) = $0, let image = result {
                    images += [image]
                }
                group.leave()
            }
        }

        group.notify(queue: .main) { completion(images.sorted { $0.id < $1.id }) }
    }

    func gameVideos(_ ids: [Int], completion: @escaping ([GameVideo]) -> Void) {
        var videos = [GameVideo]()
        let group = DispatchGroup()

        /// complexity generated by igdb Game Video api https://api-docs.igdb.com/?swift#game-video
        ids.forEach { [weak self] id in
            group.enter()
            self?.video(id) {
                if case let .success(result) = $0, let video = result {
                    videos += [video]
                }
                group.leave()
            }
        }

        group.notify(queue: .main) { completion(videos.sorted { $0.id < $1.id }) }
    }
}

private extension GameDetailInteractor {
    func screenshot(_ id: Int, completion: @escaping (Result<GameImage?, APIError>) -> Void) {
        gameImageService.screenshots(id) {
            completion($0.map { $0.first })
        }
    }

    func video(_ id: Int, completion: @escaping (Result<GameVideo?, APIError>) -> Void) {
        gameVideoService.videos(id) {
            completion($0.map { $0.first })
        }
    }
}
